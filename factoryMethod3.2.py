# -*- coding: utf-8 -*-
"""factoryMathod3.2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18A_dnXcu31vXkXAZ6d_FadQnzmtlI_2P

#Factory Method, exercício 3.2

Crie dois arquivos texto em um diretório qualquer:

* publico.txt
> Estas são informações públicas sobre qualquer coisa. Todo mundo pode ver este arquivo.

* confidencial.txt
> Estas são informações confidenciais, o que significa que você provavelmente sabe a palavra secreta!

Usando o padrão *Factory Method*, crie duas provedoras de informação: uma que retorna informações públicas e outra retorna informações confidenciais. Utilize o provedor confidencial se o usuário informar a senha **designpatterns** como parâmetro para o programa, que deve recuperar a informação e exibi-la na tela.

## Solução

Começamos a importação dos arquivos .txt fazendo a ligação entre o Google Drive e o Colab.
"""

from google.colab import drive
drive.mount('/content/gdrive')

"""Em seguida precisamos adicionar a pasta em que estão os arquivos .txt."""

import random
import sys
sys.path.insert(1, '/content/gdrive/MyDrive/Colab Notebooks/FactoryMethod3.2')

"""Teremos duas classes responsáveis por exibir as informações contidas nos arquivos .txt, sendo uma delas para o arquivo **público** e outra para o arquivo **confidencial**."""

class Public:
    def exibeInfos():
        with open("/content/gdrive/MyDrive/Colab Notebooks/FactoryMethod3.2/publico.txt", "r") as arquivo:
            text = arquivo.read()
        print(text)


class Confidential:
    def exibeInfos():
        with open("/content/gdrive/MyDrive/Colab Notebooks/FactoryMethod3.2/confidencial.txt", "r") as arquivo:
            text = arquivo.read()
        print(text)

"""Através da classe Factory que iremos criar os objetos sem expor a lógica de criação de cada um para o cliente. Assim o cliente irá utilizar uma mesma interface para a criação de um novo tipo de objeto.

"""

def Factory(senha):
    types = {
        "public": Public,
        "confidential": Confidential
    }
    return types[senha]

"""Função que analisa a entrada e define qual das classes irá manipular a entrada. Caso a entrada contenha a senha correta irá retornar o arquivo confidencial e caso a entrada não contenha senha, será aberto o arquivo público."""

def defineSeguranca(senha):
    if senha == "designpatterns":
        return 'confidential'
    else: 
        return 'public'

"""Aqui temos a senha passada como parâmetro para a função que define o tipo de segurança (pública ou confidencial) que será manipulada por Factory e exibirá as informações contidas no arquivo .txt referente."""

if __name__ == "__main__":
    senha = "designpatterns"
    Factory(defineSeguranca(senha)).exibeInfos()
